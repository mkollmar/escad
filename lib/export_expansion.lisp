;; Copyright (C) 2011, 2012, 2013, 2014 Markus Kollmar
;;
;; This file is part of ESCAD.
;;
;; ESCAD is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; ESCAD is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with ESCAD.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "COMMON-LISP-USER")
(defpackage :de.markus-herbert-kollmar.escad.expansion.export
  (:use :common-lisp :escad)
  (:export :export2dot :export2svg)
  (:documentation "Export current view to dot format (graphviz) and svg (XML/HTML)."))

(in-package :de.markus-herbert-kollmar.escad.expansion.export)


;; USER CONFIG START
(defparameter *dot-header* "//Generated by escad expansion export.")
(defparameter *svg-header* "//Generated by escad expansion export.")
;; USER CONFIG END


(defun export2dot (expansion-symbol-name &optional (filename "view.dot"))
  "expansion-symbol-name [relative-file-name] ->
Export view to a textual dot (graphviz) file with name <view.dot>, which is viewable by a text editor.
Do this if symbol will be activated!"
  (with-open-file (out (concatenate 'string *escad-view-dir* filename)
		       :direction :output
		       :if-exists :supersede)
		  (with-standard-io-syntax
		   (princ *dot-header* out) (write-char #\newline out)
		   (princ "digraph schematic {" out) (write-char #\newline out)
		   (dolist (name (ls))
		     (princ (concatenate 'string name ";") out)
		     (write-char #\newline out))
		   (dolist (name (lr))
		     (with-slots (comment ref_from ref_to taxonomy) (gethash name *relations*)
				 (loop for i from 0 to (- (length ref_from) 1) do
				      (princ (concatenate 'string (string (nth i ref_from))
							  " -> "
							  (string (nth i ref_to))
							  ";") out)
				      (write-char #\newline out))))
		   (write-char #\newline out)
		   (princ "}" out))))

(defun export2svg (expansion-symbol-name &optional (filename "view.svg"))
  "expansion-symbol-name [relative-file-name] ->
Export view to a svg (xml) graphical file with name <view.svg>, which is viewable e.g. by the browser firefox."
    (export2dot expansion-symbol-name *escad_tmp_file*)
    #+clisp (sys::shell (concatenate 'string "dot -Tsvg -o " *escad-view-dir* filename " " *escad_tmp_file*)) '("Done" '(0 "GPL3"))
    #-clisp '("Sorry, function not available. Please type 'dot -Tsvg -o outputfile.svg inputfile.dot' in your shell manualy." '(1 "GPL3")))
