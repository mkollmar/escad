;; Copyright (C) 2011, 2012, 2013, 2014, 2020 Markus Kollmar
;;
;; This file is part of ESCAD.
;;
;; ESCAD is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; ESCAD is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with ESCAD.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "COMMON-LISP-USER")
(defpackage :de.markus-herbert-kollmar.escad.export
  (:use :common-lisp :escad)
  (:nicknames :escad.export)
  (:export :export2dot :export2pdf :export2svg :export2svg4browserclient :export-pedigree2svg :export-mindmap2svg)
  (:shadow #:cos)
  (:documentation "Export current view to dot format (graphviz) and svg (XML/HTML)."))

(in-package :de.markus-herbert-kollmar.escad.export)


;; USER CONFIG START
(defparameter *dot-header* "//Generated by escad expansion export.")
(defparameter *svg-header* "")
;; USER CONFIG END


(defun export2dot (expansion-symbol-name &optional (filename "escad_export.dot"))
  "expansion-symbol-name [relative-file-name] -> filename
Export view to a textual dot (graphviz) file with name <escad_export.dot>, which is viewable by a text editor.
Do this if symbol will be activated!"
  (let ((absolute-filename (concatenate 'string *escad-view-dir* filename)))
    (with-open-file (out absolute-filename :direction :output :if-exists :supersede)
      (with-standard-io-syntax
	(princ *dot-header* out) (write-char #\newline out)
	(princ "digraph schematic {" out) (write-char #\newline out)
	(dolist (name (ls :exclude-taxonomy '("escad.symbol._escad" "escad.symbol._view")))
	  (princ (concatenate 'string name ";") out)
	  (write-char #\newline out))
	(dolist (name (lr))
	  (with-slots (comment ref_from ref_to taxonomy) (gethash name escad::*relations*)
	    (loop for i from 0 to (- (length ref_from) 1) do
		 (princ (concatenate 'string (string (nth i ref_from)) " -> " (string (nth i ref_to)) ";") out)
		 (write-char #\newline out))))
	(write-char #\newline out)
	(princ "}" out)))
    absolute-filename))

(defun export2pdf (expansion-symbol-name &optional (filename "escad_export.pdf"))
  "expansion-symbol-name [relative-file-name] -> filename
Export view to a PDF file with name <escad_export.pdf>."
  (let ((absolut-output-filename (concatenate 'string *escad-view-dir* filename)))
    (export2dot expansion-symbol-name *escad_tmp_file*)
    #+clisp (sys::shell (concatenate 'string "dot -Tpdf -o " absolut-output-filename " " (concatenate 'string *escad-view-dir* *escad_tmp_file*)))
    #-clisp '("Sorry, function not available. Please type 'dot -Tpdf -o outputfile.pdf inputfile.dot' in your shell manually." '(1 "GPL3"))
    absolut-output-filename))

(defun export2svg (expansion-symbol-name &optional (filename "escad_export.svg"))
  "expansion-symbol-name [relative-file-name] -> filename
Export view to a svg (xml) graphical file with name <escad_export.svg>, which is viewable e.g. by the browser firefox."
  (let ((absolut-output-filename (concatenate 'string *escad-view-dir* filename)))
    (export2dot expansion-symbol-name *escad_tmp_file*)
    #+clisp (sys::shell (concatenate 'string "dot -Tsvg -o " absolut-output-filename " " (concatenate 'string *escad-view-dir* *escad_tmp_file*)))
    #-clisp '("Sorry, function not available. Please type 'dot -Tsvg -o outputfile.svg inputfile.dot' in your shell manually." '(1 "GPL3"))
    absolut-output-filename))

(defun make-pedigree-tree (root-sym-name)
  ""
  (let ((result '(("Vater" "Mutter")("Ich")("Kind"))))
    ;(with-slots ((ref_to-s ref_to) (tax taxonomy)) (gethash root-sym-name *symbols*)
     ; (
  result))

(defun svg-sym (x y name weight &key onclick ng-click)
  "x y name weight &key[onclick ng-click] -> string-with-svg
Generate svg-string symbolizing mindmap-symbol with name in it."
  (let ((result "") (width "1"))
    (if (> (if weight weight 0) 0.75)
	(setq width "3" color "yellow")
	(setq width "1" color "yellow"))
    (setq result (concatenate 'string result (format nil "<g~@[ onclick=\"~a\"~]~@[ ng-click=\"~a\"~]>~%" onclick ng-click)))
    (setq result (concatenate 'string result (svg-ellipse x y "2cm" "0.7cm" color width)))
    (setq result (concatenate 'string result (svg-text x y name)))
    (setq result (concatenate 'string result (format nil "</g>~%")))
    ))

(defun svg-ellipse (x y rx ry (color "orange") (width "2"))
  "Print ellipse at pos x, y."
  (let ((result ""))
    (setq result (concatenate 'string result (format nil "<ellipse cx=\"~a\" cy=\"~a\" rx=\"~a\" ry=\"~a\" fill=\"~a\" stroke=\"blue\" stroke-width=\"~a\" />~%" x y rx ry color width)))))
    
(defun svg-text (x y name)
  "Print text at pos."
  (let ((result ""))
    (setq result (concatenate 'string result (format nil "<text x=\"~a\" y=\"~a\" fill=\"blue\" style=\"font-size: 0.35cm; text-anchor: middle\" dominant-baseline=\"middle\">" x y)))
    (setq result (concatenate 'string result (format nil "~a" name)))
    (setq result (concatenate 'string result (format nil "</text>~%")))))

(defun svg-line (x1 y1 x2 y2 &key (color "black"))
  "Draw line at pos."
  (let ((result ""))
    (setq result (concatenate 'string result
      (format nil "<line x1=\"~a\" y1=\"~a\" x2=\"~a\" y2=\"~a\" stroke=\"~a\" stroke-width=\"1\" />~%" x1 y1 x2 y2 color)))))

;; (defun draw-mindmap-relations-svg (layout)
;;   "layout-assoc-list ->"
;;   (let ((relations (lr)) (result ""))
;;     (dolist (name relations)
;;       (with-slots ((from ref_from) (to ref_to)) (gethash name escad::*relations*)
;; 	(setq result (concatenate 'string result
;; 	  (svg-line (car (cdr (assoc (car from) layout :test #'string=))) (cadr (cdr (assoc (car from) layout :test #'string=)))
;; 		    (car (cdr (assoc (car to) layout :test #'string=))) (cadr (cdr (assoc (car from) layout :test #'string=))))))))
;;     result))

;; (defun draw-mindmap-symbols-svg (layout)
;;   "layout-assoc-list ->"
;;   (let ((result ""))
;;     (prin1 layout)
;;     (dolist (sym layout)
;;       (setq result (concatenate 'string result
;; 	(svg-text (car (cdr sym)) (cadr (cdr sym)) (car sym)))))
;;     result))


;; (defun layout-mindmap ()
;;   "TODO!"
;;   (let ((angle 0) (radius 0) (weights asw))
;;     (dolist (level weights)
;;       (prin1 level) (format t "||")
;;       (dolist (data level)
;; 	(if (not (numberp data))
;; 	    (progn
;; 	      (setf layout (acons data (list radius angle) layout))
;; 	      (setq angle (+ angle 10))))
;; 	(setq radius (+ radius 10))))
;;     (princ (draw-mindmap-relations-svg layout) out)
;;     (princ (draw-mindmap-symbols-svg layout) out)))

(defun export2svg4browserclient (activated-symbol-name &optional (filename "escad_view.svg"))
  "symbol-name [relative-file-name] -> absolut-file-name
Export view to a svg file, which is viewable by some internet-browsers especially the escad-browserclient. Do this by symbol-activation!"
  (let ((absolute-filename (concatenate 'string *escad-view-dir* filename))
	(weights (asw)) (symbols '()))
    (with-open-file (out absolute-filename :direction :output :if-exists :supersede)
      (with-standard-io-syntax
	(princ "<?xml version=\"1.0\" standalone=\"no\"?>" out) (write-char #\newline out)
	(princ "<svg width=\"1200px\" height=\"500px\" viewBox=\"0 0 1200 500\"" out) (write-char #\newline out)
	(princ "     xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">" out) (write-char #\newline out)(write-char #\newline out)
	(princ "  <rect width=\"100%\" height=\"100%\" fill=\"orange\" stroke=\"black\" />" out)
	(write-char #\newline out)
	(dolist (name (ls))
	  (let ((x (gsa name "x-coord")) (y (gsa name "y-coord")))
	    (setq symbols (acons name (list (if x x "150") (if y y "100")) symbols))))
	(dolist (name (lr))
	  (with-slots ((from ref_from) (to ref_to)) (gethash name escad::*relations*)
	    (princ (svg-line (cadr (assoc (car from) symbols :test #'string=)) (caddr (assoc (car from) symbols :test #'string=))
			     (cadr (assoc (car to) symbols :test #'string=)) (caddr (assoc (car to) symbols :test #'string=))) out)))
	(dolist (sym symbols)
	  (princ (svg-sym (cadr sym) (caddr sym) (car sym)
			  (escad::sp (car sym) 'escad::weight)
			  :ng-click (format nil "selectSymbol('~a')" (car sym))) out))
	(write-char #\newline out)
	(princ "</svg>" out)))
    absolute-filename))

(defun export-mindmap2svg (activated-symbol-name &optional (filename "escad_mindmap_export.svg"))
  "symbol-name [relative-file-name] -> absolut-file-name
Export view to a svg file, which is viewable by some internet-browsers (e.g. firefox).
Do this by symbol-activation! Symbols with highest weights are placed more in the middle.
Relations with highest weight are placed nearer at source-symbol."
  (let ((absolute-filename (concatenate 'string *escad-view-dir* filename))
	(weights (asw)) (symbols '()))
    (with-open-file (out absolute-filename :direction :output :if-exists :supersede)
      (with-standard-io-syntax
	(princ "<?xml version=\"1.0\" standalone=\"no\"?>" out) (write-char #\newline out)
	(princ "<svg width=\"25cm\" height=\"15cm\"" out) (write-char #\newline out)
	(princ "     xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">" out) (write-char #\newline out)(write-char #\newline out)
	(princ "  <rect width=\"100%\" height=\"100%\" fill=\"black\" />" out)
	(dolist (name (ls :exclude-taxonomy '("escad.symbol._escad" "escad.symbol._view" "escad.symbol._escad.export.mindmap.svg")))
	  ;(format t "<~S>  " (gsa "Projekt" 'x))
	  (setq symbols (acons name (list (gsa name "x-coord") (gsa name "y-coord")) symbols)))
	(dolist (name (lr))
	  (with-slots ((from ref_from) (to ref_to)) (gethash name escad::*relations*)
	    (princ (svg-line (cadr (assoc (car from) symbols :test #'string=)) (caddr (assoc (car from) symbols :test #'string=))
			     (cadr (assoc (car to) symbols :test #'string=)) (caddr (assoc (car to) symbols :test #'string=))) out)))
	(dolist (sym symbols)
	  (princ (svg-sym (cadr sym) (caddr sym) (car sym)
			  (escad::sp (car sym) 'escad::weight) out)))
	(write-char #\newline out)
	(princ "</svg>" out)))
    absolute-filename))

(defun make-pedigree-tree (root-sym-name)
  ""
  (let ((result '(("Vater" "Mutter")("Ich")("Kind"))))
    ;(with-slots ((ref_to-s ref_to) (tax taxonomy)) (gethash root-sym-name *symbols*)
     ; (
  result))

(defun export-pedigree2svg (symbol-name &optional (filename "escad_pedigree_export.svg"))
  "symbol-name [relative-file-name] -> filename
Export view to a svg file (default <escad_pedigree_export.svg>), which is viewable by some internet-browsers (e.g. firefox).
Do this by symbol-activation!"
  (let ((absolute-filename (concatenate 'string *escad-view-dir* filename))
	(pos-of-symbols '()))
    (with-open-file (out absolute-filename :direction :output :if-exists :supersede)
      (with-standard-io-syntax
	(princ "<?xml version=\"1.0\" standalone=\"no\"?>" out) (write-char #\newline out)
	(princ "<svg width=\"10cm\" height=\"9cm\" viewBox=\"0 0 1000 900\"" out) (write-char #\newline out)
	(princ "     xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">" out) (write-char #\newline out)(write-char #\newline out)
	(dolist (row print-table)
	  (dolist (name row)
	    (princ (svg-text x y name) out)
	    (setq x (+ x 8)))
	  (setq x 5 y (+ y 4)))
	(write-char #\newline out)
	(princ "</svg>" out)))
    absolute-filename))
