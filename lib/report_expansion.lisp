;; Copyright (C) 2011, 2012, 2013, 2020 Markus Kollmar
;;
;; This file is part of ESCAD.
;;
;; ESCAD is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; ESCAD is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with ESCAD.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(in-package "COMMON-LISP-USER")
(defpackage :de.markus-herbert-kollmar.escad.report
  (:use :common-lisp :escad)
  (:nicknames :escad.report)
  (:export :report2html :report2txt :report_corona_trace2pdf)
  (:shadow #:cos)
  (:documentation "Analyse schematic and extract basic information to various file formats."))

(in-package :de.markus-herbert-kollmar.escad.report)


;; USER CONFIG START
(defparameter *html-header* "<!-- ** Generated by escad expansion report. ** -->" "Will be inserted in html")
(defparameter *html-css* "" "This is a string which will be inserted inline in html document and you can define css.")
(defparameter *text-header* "** Generated by escad expansion report. **" "will be inserted at beginning of generated text document.")
(defparameter *latex-header* "%% Generated by escad expansion report.
\\documentclass[a4paper, 12pt, openany]{scrartcl}
\\usepackage[T1]{fontenc}
\\usepackage{lmodern,textcomp}
\\usepackage[utf8]{inputenc}
\\usepackage[paper=a4paper, left=2cm, top=20mm, bottom=15mm, right=15mm, includefoot, foot=\\baselineskip, footskip=10mm]{geometry}
\\usepackage[headsepline,footsepline]{scrpage2}
\\usepackage[table]{xcolor}
\\usepackage{amsmath}
\\usepackage{rotating}
\\DeclareMathOperator\\sign{sign}
\\usepackage{upgreek}
\\usepackage[locale=DE,per=frac]{siunitx}
\\usepackage{amssymb}
\\usepackage{xcolor}
\\usepackage{tikz}
%\\usepackage{pgfplots}
\\usetikzlibrary{matrix, positioning, shapes, arrows, automata, shadows, patterns}
\\usepackage{index}
%\makeindex
\\pagestyle{scrheadings}
\\clearscrheadings
\\clearscrheadfoot

\\newcommand{\\MyTitle}{~a}
\\newcommand{\\MyAuthor}{~a}

\\newcommand{\\MyDate}{\\today}
\\ohead{Seite: \\pagemark}
%\\chead{}
\\ihead{\\MyTitle}
\\ofoot{\\MyAuthor}
%\\cfoot{}
\\ifoot{\\MyDate}

\\usepackage[pdftex,
            pdfauthor={\\MyAuthor},
            pdftitle={\\MyTitle},
            pdfsubject={\\MyTitle},
            pdfkeywords={\\MyTitle},
%            pdfproducer={Latex with hyperref},
%            pdfcreator={pdflatex}
]{hyperref}  % Metadata in PDF

\\author{\\MyAuthor}
\\title{\\MyTitle}

\\input{kvmacros}

\\begin{document}
~a
\\end{document}
" "will be inserted at beginning of generated latex document.")
;; USER CONFIG END


(defun make-pdf-report (filename title_ author_ content_)
  "latex_filename -> pdf_filename
make pdf file of given latex_filename which have to be without directory path."
  (let ((title title_) (author author_) (content content_)
	(latex_filename (concatenate 'string *escad-view-dir* filename ".tex")))
    (with-open-file (out latex_filename :direction :output :if-exists :supersede)
      (with-standard-io-syntax
	(format out *latex-header* title author content)))
    (when (escad::system-shell "pdflatex" (list "-output-directory" (concatenate 'string *escad-view-dir* latex_filename)))
      (return-from make-pdf-report (concatenate 'string filename ".pdf"))))
  nil)

(defun report2html (expansion-symbol-name &optional (filename "report.html"))
  "expansion-symbol-name [relative-file-name] ->
Analyse view and try to report view to a html file with name <report.html>, which is viewable by a internet browser with svg support."
  (let* ((output-filename (concatenate 'string *escad-view-dir*
				      (call-expansion-function "escad.symbol._escad.export.svg"
							       "export2svg" expansion-symbol-name)))
	(title "ESCAD-HTML-REPORT: ")
	(css *html-css*)
	(description (with-output-to-string (stream)
			(dolist (name (ls :exclude-taxonomy '("escad.symbol._escad" "escad.symbol._thisView")))
			  (format stream "<p>") (format stream name) (format stream " (")
			  (format stream (sp name 'escad:taxonomy)) (format stream "):")
			  (let ((_comment (sp name 'escad:comment)))
			    (if _comment (format stream _comment) (format stream "")))
			  (format stream "</p>"))))
	(svg-schematic (file-data2string output-filename)))

    (with-open-file (out filename :direction :output :if-exists :supersede)
		    (with-standard-io-syntax
		     (princ *html-header* out) (write-char #\newline out)
		     (princ "
<!DOCTYPE html>  
<html>  
  <head>  
    <title>" out)
		     (princ title out)
		     (princ "
</title>" out)
		     (princ "<style type=\"text/css\">" out)
		     (princ css out)
		     (princ "</style>
    <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />
  </head>  
  <body>" out)
		     (princ svg-schematic out)
		     (princ description out)
		     (princ "
  </body>  
</html>" out)
		     (write-char #\newline out)))
    output-filename))

(defun report_corona_trace2pdf (expansion-symbol-name &optional (filename "report"))
  "expansion-symbol-name [relative-file-name_without_extension] ->
Analyse view and try to report which persons need quarantaine."
  (let ((output-filename (concatenate 'string
				      (or (gsa expansion-symbol-name "filename_relative")
					  filename))))
    (make-pdf-report output-filename "test" "escad" (concatenate 'string "This is a test output produced by activation of " expansion-symbol-name))))


(defun report2txt (expansion-symbol-name &optional (filename "report.txt"))
  "expansion-symbol-name [relative-file-name] ->
Analyse view and try to report view to a textual file with name <report.txt>, which is viewable by a text editor."
  (let ((output-filename (concatenate 'string *escad-view-dir* filename)))
    (with-open-file (out output-filename
			 :direction :output
			 :if-exists :supersede)
		    (with-standard-io-syntax
		     (princ *text-header* out) (write-char #\newline out)
		     (princ "Symbols:" out) (write-char #\newline out)
		     (dolist (name (ls))
		       (princ (concatenate 'string name ";") out)
		       (write-char #\newline out))
		     (princ "Relations:" out) (write-char #\newline out)
		     (dolist (name (lr))
		       (with-slots (comment ref_from ref_to taxonomy) (r name)
				   (loop for i from 0 to (- (length ref_from) 1) do
					 (princ (concatenate 'string (string (nth i ref_from))
							     " -> "
							     (string (nth i ref_to))
							     ";") out)
					 (write-char #\newline out))))
		     (write-char #\newline out)
		     (princ "END Report" out)))
    output-filename))

