;; Copyright (C) 2011, 2012, 2013 Markus Kollmar
;;
;; This file is part of ESCAD.
;;
;; ESCAD is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; ESCAD is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with ESCAD.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(in-package "COMMON-LISP-USER")
(defpackage :de.markus-herbert-kollmar.escad.expansion.report2txt
  (:use :common-lisp :escad)
  (:export :report2txt)
  (:shadow #:cos)
  (:documentation "Analyse schematic and extract basic information to text format."))

(in-package :de.markus-herbert-kollmar.escad.expansion.report2txt)


;; USER CONFIG START
(defparameter *header* "** Generated by escad expansion report2txt. **")
;; USER CONFIG END


(defun report2txt (expansion-symbol-name &optional (filename "report.txt"))
  "expansion-symbol-name [relative-file-name] ->
Analyse view and try to report view to a textual file with name <report.txt>, which is viewable by a text editor."
  (with-open-file (out (concatenate 'string *escad-view-dir* filename)
		       :direction :output
		       :if-exists :supersede)
		  (with-standard-io-syntax
		   (princ *header* out) (write-char #\newline out)
		   (princ "Symbols:" out) (write-char #\newline out)
		   (dolist (name (ls))
		     (princ (concatenate 'string name ";") out)
		     (write-char #\newline out))
		   (princ "Relations:" out) (write-char #\newline out)
		   (dolist (name (lr))
		     (with-slots (comment ref_from ref_to taxonomy) (r name)
				 (loop for i from 0 to (- (length ref_from) 1) do
				      (princ (concatenate 'string (string (nth i ref_from))
							  " -> "
							  (string (nth i ref_to))
							  ";") out)
				      (write-char #\newline out))))
		   (write-char #\newline out)
		   (princ "END Report" out))))

